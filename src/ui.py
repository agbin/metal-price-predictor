import streamlit as st
import pandas as pd
import plotly.graph_objects as go
from datetime import datetime
from src.config import AVAILABLE_METALS, RESULTS_DIR
from typing import Dict, Optional
import os

def create_sidebar(df):
    """Tworzy i zarzƒÖdza panelem bocznym aplikacji."""
    with st.sidebar:
        st.header("Ustawienia")
        selected_metal = st.selectbox("Wybierz metal", AVAILABLE_METALS, key="metal_selector")
        
        st.markdown("---")
        
        last_date = pd.to_datetime(df['data']).max()
        forecast_months = st.slider(
            "Wybierz okres prognozy (w miesiƒÖcach)", 
            min_value=1, 
            max_value=120, 
            value=12, 
            step=1,
            key="forecast_slider"
        )
        
        forecast_end_date = last_date + pd.DateOffset(months=forecast_months)
        st.info(f"Prognoza do: {forecast_end_date.strftime('%B %Y')}")
        
    return selected_metal, forecast_months, last_date, forecast_end_date

def create_main_view(selected_metal):
    """Tworzy g≈Ç√≥wny widok aplikacji z tytu≈Çem i zak≈Çadkami."""
    st.markdown(f"""
    <div style="text-align:center; font-size:28px; margin:10px 0; font-weight:bold; color:#FF4B4B;">
    Wybrany metal: {selected_metal}
    </div>
    """, unsafe_allow_html=True)
    
    return st.tabs(["Prognozowanie üìâ", "O Aplikacji ‚ÑπÔ∏è", "Dok≈Çadno≈õƒá üèÜ"])

def get_current_model_info(metal: str, model_dir: str = 'models') -> Optional[str]:
    """Odczytuje nazwƒô zapisanego modelu z pliku tekstowego."""
    model_name_path = os.path.join(model_dir, f'model_{metal}_name.txt')
    if os.path.exists(model_name_path):
        with open(model_name_path, 'r') as f:
            return f.read().strip()
    return None

def display_prediction_tab(df, selected_metal, train_callback, forecast_callback):
    """Wy≈õwietla zawarto≈õƒá zak≈Çadki 'Prognozowanie'."""
    st.subheader("Statystyki dla wybranego metalu")
    st.write(df[selected_metal].describe())

    st.subheader("Wykres historyczny")
    historical_chart = create_price_chart(df, None, selected_metal)
    st.plotly_chart(historical_chart, use_container_width=True)

    st.subheader("Trenowanie modelu")
    col1, col2 = st.columns(2)
    with col1:
        current_model_name = get_current_model_info(selected_metal)
        if current_model_name:
            st.info(f"**Aktualnie u≈ºywany model:** `{current_model_name}`\n\nZosta≈Ç on automatycznie wybrany jako najdok≈Çadniejszy na podstawie danych historycznych.")
        else:
            st.warning("Brak wytrenowanego modelu. Kliknij przycisk poni≈ºej, aby go przygotowaƒá.")

        st.button("Trenuj model", on_click=train_callback, help="Kliknij, aby ponownie wytrenowaƒá model na najnowszych danych. Mo≈ºe to zajƒÖƒá kilka minut.")
        st.caption("Tworzy i zapisuje nowy model prognostyczny na podstawie ca≈Çego zbioru danych.")

    with col2:
        st.button("Prognozuj", on_click=forecast_callback, help="Kliknij, aby wygenerowaƒá prognozƒô cen na wybrany okres.")
        st.caption("U≈ºywa istniejƒÖcego modelu do szybkiego wygenerowania przysz≈Çych cen.")

def display_about_tab():
    """Wy≈õwietla zawarto≈õƒá zak≈Çadki 'O Aplikacji'."""
    st.header("Informacje o Aplikacji")
    st.markdown("""
    Ta aplikacja zosta≈Ça stworzona w celu demonstracji mo≈ºliwo≈õci prognozowania szereg√≥w czasowych 
    z wykorzystaniem biblioteki PyCaret.
    """)

    st.subheader("Na podstawie jakich danych dzia≈Ça model?")
    st.markdown("""
    Model prognostyczny bierze pod uwagƒô szereg czynnik√≥w, aby jak najdok≈Çadniej przewidzieƒá przysz≈Çe ceny metali. Poni≈ºej znajduje siƒô kompletna lista danych wej≈õciowych:

    *   **Ceny historyczne (Lagi):** Warto≈õci cen metalu z poprzednich dni (np. `Z≈Çoto_lag_1`).
    *   **Wzajemne zale≈ºno≈õci rynkowe:** Ceny pozosta≈Çych metali (np. cena Srebra jest brana pod uwagƒô przy prognozowaniu ceny Z≈Çota).
    *   **Kluczowe wska≈∫niki makroekonomiczne:**
        *   `inflacja` - Poziom inflacji
        *   `stopy_procentowe` - Wysoko≈õƒá st√≥p procentowych
        *   `bezrobocie` - Stopa bezrobocia
        *   `pkb` - Produkt Krajowy Brutto
        *   `pkb_global` - Globalny Produkt Krajowy Brutto
    *   **Wska≈∫niki rynk√≥w finansowych:**
        *   `kurs_usd` - Kurs dolara ameryka≈Ñskiego
        *   `indeks_vix` - Indeks zmienno≈õci rynkowej, tzw. "indeks strachu"
    *   **Sentyment z globalnych wiadomo≈õci:**
        *   `cb_sentiment_index` - Indeks sentymentu obliczony na podstawie analizy globalnych wiadomo≈õci.
    """)
    with st.expander("≈πr√≥d≈Ça danych"):
        st.markdown("""
        - **Yahoo Finance API**
        - **London Metal Exchange**
        - **World Bank**
        - **FRED (Federal Reserve Economic Data)**
        """)
    with st.expander("Wykorzystane technologie"):
        st.markdown("""
        - **Streamlit** - interfejs u≈ºytkownika
        - **PyCaret** - automatyzacja uczenia maszynowego
        - **Pandas** - manipulacja danymi
        - **Plotly** - interaktywne wykresy
        """)

def display_accuracy_tab(selected_metal):
    """Wy≈õwietla zawarto≈õƒá zak≈Çadki 'Dok≈Çadno≈õƒá' z wynikami modelu."""
    st.header(f"Dok≈Çadno≈õƒá modelu dla: {selected_metal}")

    # ≈öcie≈ºka do pliku z metrykami
    metrics_path = os.path.join('results', f'results_{selected_metal}', 'model_metrics.csv')

    if os.path.exists(metrics_path):
        st.subheader("Metryki wydajno≈õci modelu")
        st.markdown("""
        Poni≈ºsza tabela przedstawia kluczowe wska≈∫niki oceniajƒÖce dok≈Çadno≈õƒá ostatnio wytrenowanego modelu.
        Metryki te zosta≈Çy obliczone na zbiorze testowym, kt√≥ry nie by≈Ç u≈ºywany podczas trenowania.
        """)
        try:
            metrics_df = pd.read_csv(metrics_path)
                        # Zastosuj formatowanie tylko do kolumn numerycznych
            numeric_cols = metrics_df.select_dtypes(include='number').columns
            st.dataframe(metrics_df.style.format('{:.4f}', subset=numeric_cols))

            with st.expander("Obja≈õnienie metryk"):
                st.markdown("""
                - **MAE (Mean Absolute Error)**: ≈öredni bezwzglƒôdny b≈ÇƒÖd prognozy. Im ni≈ºsza warto≈õƒá, tym lepiej.
                - **MSE (Mean Squared Error)**: ≈öredni kwadratowy b≈ÇƒÖd. Kara za du≈ºe b≈Çƒôdy jest wiƒôksza. Im ni≈ºsza warto≈õƒá, tym lepiej.
                - **RMSE (Root Mean Squared Error)**: Pierwiastek z MSE. Jest w tej samej jednostce co prognozowana cena. Im ni≈ºsza warto≈õƒá, tym lepiej.
                - **R2 (R-squared)**: Wsp√≥≈Çczynnik determinacji. M√≥wi, jaki procent zmienno≈õci ceny jest wyja≈õniany przez model. Warto≈õci bli≈ºsze 1 sƒÖ lepsze.
                - **RMSLE (Root Mean Squared Log Error)**: Podobne do RMSE, ale liczone na logarytmach. Mniej wra≈ºliwe na du≈ºe b≈Çƒôdy w prognozach wysokich cen.
                - **MAPE (Mean Absolute Percentage Error)**: ≈öredni procentowy b≈ÇƒÖd. Pokazuje, o ile procent ≈õrednio myli siƒô model.
                """)
        except Exception as e:
            st.error(f"Nie uda≈Ço siƒô wczytaƒá pliku z metrykami: {e}")
    else:
        st.info("Pamiƒôtaj, ≈ºe najpierw musisz wytrenowaƒá model dla wybranego metalu, aby metryki i wykresy mog≈Çy siƒô pojawiƒá.")

    # Usuniƒôto wy≈õwietlanie wykres√≥w analizy modelu na ≈ºyczenie u≈ºytkownika.

def create_price_chart(historical_data, prediction_data, metal_name):
    """Tworzy interaktywny wykres cen z danymi historycznymi i prognozƒÖ."""
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=historical_data['data'], 
        y=historical_data[metal_name], 
        mode='lines', 
        name='Dane historyczne'
    ))
    if prediction_data is not None:
        fig.add_trace(go.Scatter(
            x=prediction_data['data'], 
            y=prediction_data['prediction_label'], 
            mode='lines', 
            name='Prognoza', 
            line=dict(color='red', dash='dash')
        ))
    fig.update_layout(
        title=f'Ceny historyczne i prognoza dla: {metal_name}',
        xaxis_title='Data',
        yaxis_title='Cena (USD)',
        template='plotly_dark'
    )
    return fig
